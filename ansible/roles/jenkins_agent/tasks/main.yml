- name: Create Groovy script to define permanent Jenkins agent
  become: true
  copy:
    dest: /var/lib/jenkins/init.groovy.d/create-agent.groovy
    content: |
      import jenkins.model.*
      import hudson.slaves.*
      import hudson.model.*
      import jenkins.slaves.*
      import java.util.logging.Logger

      def logger = Logger.getLogger("")
      def instance = Jenkins.getInstance()

      def nodeName = "jenkins-agent-1"
      def home = "/home/ec2-user/jenkins"
      def numExecutors = 2
      def labelString = "jenkins-agent"

      // Check if the node already exists
      if (instance.getNode(nodeName) == null) {
          logger.info("Creating new Jenkins agent: ${nodeName}")

          DumbSlave agent = new DumbSlave(
              nodeName,                              // Name
              "Automatically created agent",         // Description
              home,                                   // Remote FS
              Integer.toString(numExecutors),        // # of executors
              Node.Mode.NORMAL,                       // Mode
              labelString,                            // Label
              new JNLPLauncher(),                     // Launcher (JNLP)
              new RetentionStrategy.Always(),         // Retention strategy
              new LinkedList<>())                     // Node properties

          instance.addNode(agent)
          logger.info("Agent '${nodeName}' created successfully.")
      } else {
          logger.info("Agent '${nodeName}' already exists. Skipping.")
      }

      // Get JNLP Secret for the agent
      def agentNode = instance.getNode(nodeName)
      def jnlpSecret = agentNode.getComputer().getJnlpMac()
      logger.info("JNLP Secret for agent '${nodeName}': ${jnlpSecret}")

      // Print the JNLP secret to a file that GitHub Actions can capture
      new File("/var/lib/jenkins/agent-jnlp-secret.txt").write(jnlpSecret)

- name: Restart Jenkins
  become: true
  systemd:
    name: jenkins
    state: restarted
